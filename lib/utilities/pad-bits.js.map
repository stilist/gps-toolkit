{"version":3,"sources":["../../src/utilities/pad-bits.js"],"names":[],"mappings":";;;;;kBAoBwB,Q;;AApBxB;;AAEA;;;;;;;;;;;;;;;;;;AAkBe,SAAS,QAAT,CAAkB,IAAlB,EAAwB,MAAxB,EAAgC;AAC7C,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B,MAAM,IAAI,SAAJ,CAAc,uBAAd,CAAN;AAC9B,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;;AAEhC,MAAI,KAAK,MAAL,GAAc,MAAlB,EAA0B,OAAO,IAAP;;AAE1B,SAAQ,IAAI,MAAJ,CAAW,SAAS,KAAK,MAAzB,IAAmC,IAA3C;AACD","file":"pad-bits.js","sourcesContent":["import 'babel-polyfill'\n\n/**\n * Ensure the `String` `bits` is at least `length` characters long by adding\n * `0`s to the left of the string.\n *\n * @param {string} bits - The string of bits.\n * @param {number} length - The minimum number of bits.\n * @returns {string} The adjusted string.\n *\n * @throws {TypeError}\n *\n * @example <caption>With a short string</caption>\n *   pad_bits('10', 5)\n *   //=> '00010'\n *\n * @example <caption>With a long string</caption>\n *   pad_bits('1111111111', 5)\n *   //=> '1111111111'\n */\nexport default function pad_bits(bits, length) {\n  if (typeof bits !== 'string') throw new TypeError('bits must be a String')\n  if (typeof length !== 'number') throw new TypeError('length must be a Number')\n\n  if (bits.length > length) return bits\n\n  return ('0'.repeat(length - bits.length) + bits)\n}\n"]}