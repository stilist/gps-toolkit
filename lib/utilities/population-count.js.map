{"version":3,"sources":["../../src/utilities/population-count.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;AAWA,SAAS,gBAAT,CAA0B,CAA1B,EAA6B;AAC3B,MAAI,QAAQ,CAAZ;;;;;;AAMA,SAAO,CAAP,EAAU,OAAV;AAAmB,SAAK,IAAI,CAAT;AAAnB,GAEA,OAAO,KAAP;AACD;kBACc,gB","file":"population-count.js","sourcesContent":["import 'babel-polyfill'\n\n/**\n * Count the number of `1`s (non-zero values) in a binary sequence.\n *\n * @param {number} n - The number to test.\n * @returns {number} The number of bits set.\n *\n * @see https://en.wikipedia.org/wiki/Hamming_weight\n * @see http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n */\nfunction population_count(n) {\n  let count = 0\n\n  // It looks odd to use just `n` as the predicate with no comparisons, but the\n  // loop will exit as soon as `n` is bit shifted to be all `0`s. If there are\n  // only a few bits set, and they're early in the sequence, this skips a lot\n  // of iteration.\n  for (; n; count++) n &= n - 1\n\n  return count\n}\nexport default population_count\n"]}