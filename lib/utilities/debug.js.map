{"version":3,"sources":["../../src/utilities/debug.js"],"names":[],"mappings":";;;;;QAsBgB,c,GAAA,c;QA4CA,Q,GAAA,Q;;AAlEhB;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBO,SAAS,cAAT,CAAwB,MAAxB,EAAyD;AAAA,MAAzB,MAAyB;;AAC9D,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;AAChC,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;;AAEhC,SAAO,uBAAS,OAAO,QAAP,CAAgB,CAAhB,CAAT,EAA6B,MAA7B,CAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,KAA/B,EAAsD;AAAA,MAAhB,SAAgB,yDAAJ,EAAI;;AACpD,SAAO,OAAO,MAAP,CAAc,CAAd,EAAiB,KAAjB,IAA0B,SAA1B,GACL,OAAO,MAAP,CAAc,QAAQ,UAAU,MAAhC,CADF;AAED;;AAED;;;;;;;;;;;;;;;;;;AAkBO,SAAS,QAAT,CAAkB,IAAlB,EAAwB,aAAxB,EAAuC,MAAvC,EAA+C;AACpD,MAAI,CAAC,MAAM,OAAN,CAAc,IAAd,CAAL,EAA0B,MAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AAC1B,MAAI,CAAC,OAAO,SAAP,CAAiB,aAAjB,CAAL,EAAsC,MAAM,IAAI,SAAJ,CAAc,gCAAd,CAAN;AACtC,MAAI,CAAC,OAAO,SAAP,CAAiB,MAAjB,CAAL,EAA+B,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;;AAE/B,WAAS,KAAK,GAAL,CAAS,MAAT,CAAT;;AAEA,MAAM,aAAa,KAAK,MAAL,CAAY,UAAC,IAAD,EAAO,KAAP;AAAA,WAAiB,cAAc,IAAd,EAAoB,SAAS,KAA7B,EAAoC,GAApC,CAAjB;AAAA,GAAZ,EACY,IAAI,MAAJ,CAAW,MAAX,CADZ,CAAnB;;AAGA,MAAM,SAAY,eAAe,aAAf,EAA8B,MAA9B,CAAZ,UACN,UADA;;AAGA,UAAQ,GAAR,CAAY,MAAZ;;AAEA,SAAO,MAAP;AACD","file":"debug.js","sourcesContent":["import 'babel-polyfill'\nimport { bits_in_number } from './constants'\nimport pad_bits from './pad-bits'\n\n/**\n * Gives a `String` with the `length` least significant bits of `number`.\n *\n * @param {number} number - The number to log.\n * @param {number} [length=53] - The number of bits to log. Defaults to\n *   {@linkcode bits_in_number}.\n * @returns {string} The `length` bits of `number`.\n *\n * @throws {TypeError}\n *\n * @example <caption>With a small number</caption>\n *   bits_to_string(10, 5)\n *   //=> '01010'\n *\n * @example <caption>With a larger string</caption>\n *   bits_to_string(1023, 5)\n *   //=> '1111111111'\n */\nexport function bits_to_string(number, length = bits_in_number) {\n  if (typeof number !== 'number') throw new TypeError('number must be a Number')\n  if (typeof length !== 'number') throw new TypeError('length must be a Number')\n\n  return pad_bits(number.toString(2), length)\n}\n\n/**\n * Replaces character `index` of `string` with `character`.\n *\n * @param {string} string - The string to splice.\n * @param {number} index - The offset of the character to replace.\n * @param {string} character - The replacement character.\n * @returns {string} The spliced string.\n *\n * @access private\n *\n * @example\n * splice_string('abcde', 1, '-')\n * //=> 'a-cde'\n */\nfunction splice_string(string, index, character = '') {\n  return string.substr(0, index) + character +\n    string.substr(index + character.length)\n}\n\n/**\n * Logs an LFSR's state and marks which tap positions are used to determine\n * the next state.\n *\n * @param {Array} taps - The tap positions to mark, ordered `m..1`.\n * @param {number} current_state - The current state of the LFSR.\n * @param {number} length - The number of bits to log.\n * @returns {string} The string that was logged.\n *\n * @throws {TypeError}\n *\n * @example\n * log_taps([5, 3, 2], 0b1, 5)\n * //=> '00001\\n• •• '\n *\n * @todo Handle `length` < the high bit of `current_state` or the largest\n *   number in `taps`.\n */\nexport function log_taps(taps, current_state, length) {\n  if (!Array.isArray(taps)) throw new TypeError('array must be an Array')\n  if (!Number.isInteger(current_state)) throw new TypeError('current_state must be a Number')\n  if (!Number.isInteger(length)) throw new TypeError('length must be a Number')\n\n  length = Math.abs(length)\n\n  const indicators = taps.reduce((memo, tap_j) => splice_string(memo, length - tap_j, '•'),\n                                 ' '.repeat(length))\n\n  const output = `${bits_to_string(current_state, length)}\n${indicators}`\n\n  console.log(output)\n\n  return output\n}\n"]}