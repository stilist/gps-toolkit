{"version":3,"sources":["../../src/utilities/debug.js"],"names":[],"mappings":";;;;;QAsBgB,c,GAAA,c;;AAtBhB;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAoBO,SAAS,cAAT,CAAwB,MAAxB,EAAyD;AAAA,MAAzB,MAAyB;;AAC9D,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;AAChC,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;;AAEhC,SAAO,uBAAS,OAAO,QAAP,CAAgB,CAAhB,CAAT,EAA6B,MAA7B,CAAP;AACD","file":"debug.js","sourcesContent":["import 'babel-polyfill'\nimport { bits_in_number } from './constants'\nimport pad_bits from './pad-bits'\n\n/**\n * Gives a `String` with the `length` least significant bits of `number`.\n *\n * @param {number} number - The number to log.\n * @param {number} [length=53] - The number of bits to log. Defaults to\n *   {@linkcode bits_in_number}.\n * @returns {string} The `length` bits of `number`.\n *\n * @throws {TypeError}\n *\n * @example <caption>With a small number</caption>\n *   bits_to_string(10, 5)\n *   //=> '01010'\n *\n * @example <caption>With a larger string</caption>\n *   bits_to_string(1023, 5)\n *   //=> '1111111111'\n */\nexport function bits_to_string(number, length = bits_in_number) {\n  if (typeof number !== 'number') throw new TypeError('number must be a Number')\n  if (typeof length !== 'number') throw new TypeError('length must be a Number')\n\n  return pad_bits(number.toString(2), length)\n}\n"]}