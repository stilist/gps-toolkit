{"version":3,"sources":["../../src/utilities/dot-product.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAS,WAAT,CAAqB,SAArB,EAAgC,SAAhC,EAA2C,MAA3C,EAAmD;AACjD,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,KAAK,GAAL,CAAS,UAAU,QAAV,CAAmB,CAAnB,EAAsB,MAA/B,EACS,UAAU,QAAV,CAAmB,CAAnB,EAAsB,MAD/B,CAAT;AAED;;AAED,MAAM,aAAa,+BAAiB,YAAY,SAA7B,CAAnB;AACA,MAAM,UAAU,SAAS,UAAzB;;AAEA,SAAO,UAAU,UAAjB;AACD;kBACc,W","file":"dot-product.js","sourcesContent":["import 'babel-polyfill'\nimport population_count from './population-count'\n\n/**\n * Calculate the dot product of two binary sequences: the difference between\n * the number of matched and mismatched bits.\n *\n * > * Large positive dot product indicates strong similarity.\n * > * Large negative dot product indicates nearly all bits differ.\n * > * Dot product near 0 indicates two sequences are uncorrelated.\n * > * Dot product of n-bit sequence with itself is n.\n *\n * @param {number} sequenceA - A binary sequence (as a `Number`).\n * @param {number} sequenceB - A binary sequence (as a `Number`).\n * @param {number} [length] - The length of the sequences. Useful when the\n *   highest `1` bit is lower than the intended sequence length. (For example,\n *   passing `0b0001` and `0b0010` will give a `length` of `2`, but the\n *   intention is a `length` of `4`.) This is significant when\n *   [cross-correlating]{@link cross_correlate}\n *   [preferred sequences]{@link is_preferred_sequence}, because the\n *   inferred sequence length will naturally shift as `sequenceB` rotates.\n * @returns {number} The dot product of the sequences.\n */\nfunction dot_product(sequenceA, sequenceB, length) {\n  if (!length) {\n    length = Math.max(sequenceA.toString(2).length,\n                      sequenceB.toString(2).length)\n  }\n\n  const mismatches = population_count(sequenceA ^ sequenceB)\n  const matches = length - mismatches\n\n  return matches - mismatches\n}\nexport default dot_product\n"]}