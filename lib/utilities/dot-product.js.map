{"version":3,"sources":["../../src/utilities/dot-product.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;AAeA,SAAS,WAAT,CAAqB,SAArB,EAAgC,SAAhC,EAA2C;AACzC,MAAM,SAAS,KAAK,GAAL,CAAS,UAAU,QAAV,CAAmB,CAAnB,EAAsB,MAA/B,EACS,UAAU,QAAV,CAAmB,CAAnB,EAAsB,MAD/B,CAAf;;AAGA,MAAM,aAAa,+BAAiB,YAAY,SAA7B,CAAnB;AACA,MAAM,UAAU,SAAS,UAAzB;;AAEA,SAAO,UAAU,UAAjB;AACD;kBACc,W","file":"dot-product.js","sourcesContent":["import 'babel-polyfill'\nimport population_count from './population-count'\n\n/**\n * Calculate the dot product of two binary sequences: the difference between\n * the number of matched and mismatched bits.\n *\n * > * Large positive dot product indicates strong similarity.\n * > * Large negative dot product indicates nearly all bits differ.\n * > * Dot product near 0 indicates two sequences are uncorrelated.\n * > * Dot product of n-bit sequence with itself is n.\n *\n * @param {number} sequenceA - A binary sequence (as a `Number`).\n * @param {number} sequenceB - A binary sequence (as a `Number`).\n * @returns {number} The dot product of the sequences.\n */\nfunction dot_product(sequenceA, sequenceB) {\n  const length = Math.max(sequenceA.toString(2).length,\n                          sequenceB.toString(2).length)\n\n  const mismatches = population_count(sequenceA ^ sequenceB)\n  const matches = length - mismatches\n\n  return matches - mismatches\n}\nexport default dot_product\n"]}