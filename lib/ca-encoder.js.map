{"version":3,"sources":["../src/ca-encoder.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqDM,S;;;AACJ;;;;;AAKA,qBAAY,EAAZ,EAAgB;AAAA;;AAAA,6FACR,EADQ;;AAGd,QAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B,MAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN;AAC5B,QAAI,KAAK,CAAL,IAAU,KAAK,EAAnB,EAAuB,MAAM,IAAI,SAAJ,CAAc,2CAAd,CAAN;AACvB,UAAK,EAAL,GAAU,EAAV;AALc;AAMf;;AAED;;;;;;;;;;;;;wBASY;AACV,UAAI,KAAK,MAAT,EAAiB,OAAO,KAAK,MAAZ;;AAEjB,UAAM,QAAQ,0BAAd;AACA,UAAM,QAAQ,yBAAgB,KAAK,EAArB,CAAd;;AAEA,WAAK,MAAL,GAAc,CAAC,KAAD,EAAQ,KAAR,CAAd;;AAEA,aAAO,KAAK,MAAZ;AACD;;;;;;kBAEY,S","file":"ca-encoder.js","sourcesContent":["import 'babel-polyfill'\nimport CAEncoderG1 from './ca-encoder-g1'\nimport CAEncoderG2 from './ca-encoder-g2'\nimport GoldCode from './gold-code'\n\n/**\n * Generates a C/A-Code (coarse acquisition code) chip pattern (i.e. bitstream\n * with no meaningful content). Each Space Vehicle (satellite) transmits a\n * unique code.\n *\n * [GPS specification]{@link http://www.gps.gov/technical/icwg/IS-GPS-200H.pdf}\n * (IS-GPS-200 revision H) ยง 3.2.1.3\n *\n * > The PRN C/A-Code for SV ID number `i` is a Gold code, *G<sub>i</sub>(t)*,\n * > of 1 millisecond in length at a chipping rate of 1023 Kbps. The\n * > *G<sub>i</sub>(t)* sequence is a linear pattern generated by the modulo-2\n * > addition of two sub-sequences, *G1* and *G2<sub>i</sub>*, each of which is\n * > a 1023 chip long linear pattern. [...] The *G2<sub>i</sub>* sequence is a\n * > *G2* sequence selectively delayed by pre-assigned number of chips, thereby\n * > generating a set of different C/A-codes.\n *\n * ยง 3.3.2.1\n *\n * > The linear *G<sub>i</sub>(t)* pattern (C/A-code) is the modulo-2 sum of\n * > two 1023-bit linear patterns, *G1* and *G2<sub>i</sub>*. The latter\n * > sequence is selectively delayed by an integer number of chips to produce\n * > many different *G(t)* patterns (defined in Tables 3-Ia and 3-Ib).\n *\n * ยง 3.3.2.3\n *\n * > Each *G<sub>i</sub>(t)* sequence is a 1023-bit Gold-code which is itself\n * > the modulo-2 sum of two 1023-bit linear patterns, *G1* and\n * > *G2<sub>i</sub>*. The *G2<sub>i</sub>* sequence is formed by effectively\n * > delaying the *G2* sequence by an integer number of chips. The *G1* and\n * > *G2* sequences are generated by 10-stage shift registers having the\n * > following polynomials as referred to in the shift register input (see\n * > Figures 3-8 and 3-9).\n * >\n * > * G1 = X<sup>10</sup> + X<sup>3</sup> + 1, and\n * > * G2 = X<sup>10</sup> + X<sup>9</sup> + X<sup>8</sup> + X<sup>6</sup> + X<sup>3</sup> + X<sup>2</sup> + 1.\n * >\n * > The initialization vector for the *G1* and *G2* sequences is `1111111111`.\n * > The *G1* and *G2* shift registers are initialized at the P-coder *X1*\n * > epoch. The *G1* and *G2* registers are clocked at 1.023 MHz derived from\n * > the 10.23 MHz P-coder clock. [...]\n * >\n * > The effective delay of the *G2* sequence to form the *G2<sub>i</sub>*\n * > sequence may be accomplished by combining the output of two stages of the\n * > *G2* shift register by modulo-2 addition (see Figure 3-10). However, this\n * > two-tap coder implementation generates only a limited set of valid C/A\n * > codes.\n *\n * @augments GoldCode\n * @augments CAEncoderG1\n * @augments CAEncoderG2\n *\n * @see http://what-when-how.com/a-software-defined-gps-and-galileo-receiver/gps-signal-gps-and-galileo-receiver-part-2/\n */\nclass CAEncoder extends GoldCode {\n  /**\n   * @param {number} sv - The SV ID.\n   *\n   * @throws {TypeError}\n   */\n  constructor(sv) {\n    super(10)\n\n    if (typeof sv !== 'number') throw new TypeError('sv must be a number')\n    if (sv < 1 || sv > 32) throw new TypeError('sv must be in the range 1..32 (inclusive)')\n    this.sv = sv\n  }\n\n  /**\n   * Gold codes are generated from a pair of {@link LFSR}s.\n   *\n   * This overrides the {@link GoldCode.lfsrs} implementation to set a custom\n   * seed for the first LFSR.\n   *\n   * @access private\n   * @type {Array<FibonacciLFSR, CAEncoderG2>}\n   */\n  get lfsrs() {\n    if (this._lfsrs) return this._lfsrs\n\n    const lfsrA = new CAEncoderG1()\n    const lfsrB = new CAEncoderG2(this.sv)\n\n    this._lfsrs = [lfsrA, lfsrB]\n\n    return this._lfsrs\n  }\n}\nexport default CAEncoder\n"]}