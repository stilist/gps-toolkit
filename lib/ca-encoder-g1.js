'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('babel-polyfill');

var _fibonacciLfsr = require('./fibonacci-lfsr');

var _fibonacciLfsr2 = _interopRequireDefault(_fibonacciLfsr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* Generates the *G1* {@linkcode LFSR} for the [C/A-Code]{@linkcode CAEncoder}
* (coarse acquisition code) *G<sub>i</sub>* [Gold code]. The *G1* LFSR
* operates like a normal LFSR, but its output is the value of tap 10, rather
* than the standard binary sum of all active taps.
*
* [GPS specification]{@link http://www.gps.gov/technical/icwg/IS-GPS-200H.pdf}
* (IS-GPS-200 revision H) ยง 3.3.2.3
*
* > The *G2<sub>i</sub>* sequence is formed by effectively delaying the *G2*
* > sequence by an integer number of chips. The *G1* and *G2* sequences are
* > generated by 10-stage shift registers having the following polynomials as
* > referred to in the shift register input (see Figures 3-8 and 3-9).
* >
* > * G1 = X<sup>10</sup> + X<sup>3</sup> + 1, and
* > * G2 = X<sup>10</sup> + X<sup>9</sup> + X<sup>8</sup> + X<sup>6</sup> + X<sup>3</sup> + X<sup>2</sup> + 1.
* >
* > The initialization vector for the *G1* and *G2* sequences is `1111111111`.
* > The *G1* and *G2* shift registers are initialized at the P-coder *X1*
* > epoch. The *G1* and *G2* registers are clocked at 1.023 MHz derived from
* > the 10.23 MHz P-coder clock. [...]
*
* @augments FibonacciLFSR
*
* @see http://what-when-how.com/a-software-defined-gps-and-galileo-receiver/gps-signal-gps-and-galileo-receiver-part-2/
 */
var CAEncoderG1 = function (_FibonacciLFSR) {
  _inherits(CAEncoderG1, _FibonacciLFSR);

  /**
   * @throws {TypeError}
   */
  function CAEncoderG1() {
    _classCallCheck(this, CAEncoderG1);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(CAEncoderG1).call(this, 10, [10, 3], 1023));
  }

  /**
   * Calculate the output bit using tap 10.
   *
   * @type {number}
   */


  _createClass(CAEncoderG1, [{
    key: 'output_bit',
    get: function get() {
      return this.current_state & 1;
    }
  }]);

  return CAEncoderG1;
}(_fibonacciLfsr2.default);

exports.default = CAEncoderG1;
//# sourceMappingURL=ca-encoder-g1.js.map